{"mappings":"AC4DA,IAAM,EAAiB,SAAS,aAAa,CAAC,MAE9C,EAAe,WAAW,CAAC,AA1B3B,SAAkB,CAAI,EACpB,IAAM,EAAY,AAhBpB,SAAsB,CAAI,EACxB,IAAM,EAAY,EAAE,CAEf,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAkB,EAAK,QAAQ,CAAA,OAAA,QAAA,CAAA,GAA/B,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAU,IAAI,CAAC,CACb,KAAM,EAAS,WAAW,CAAC,IAAI,GAC/B,SAAU,EAAS,OAAO,CAAC,QAAQ,CACnC,OAzBG,SAAS,AAyBM,EAzBG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,IAAK,KA0B1D,IAAK,EAAS,OAAO,CAAC,GAAG,AAC3B,E,C,C,M,E,CANG,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CASL,OAAO,CACT,EAGiC,GAE/B,EAAU,IAAI,CACZ,SAAC,CAAA,CAAe,CADlB,EAEI,OAAA,EAAe,MAAM,CAAG,EAAc,MAAM,A,GAGhD,IAAM,EAAa,EAAK,SAAS,GAE5B,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAkB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAlB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAA6B,CAA7B,IAAM,EAAN,EAAA,KAAA,CACG,EAAW,SAAS,aAAa,CAAC,KAExC,CAAA,EAAS,WAAW,CAAG,EAAS,IAAI,CACpC,EAAS,OAAO,CAAC,QAAQ,CAAG,EAAS,QAAQ,CAC7C,EAAS,OAAO,CAAC,MAAM,CAAG,AA7C9B,SAAwB,CAAM,EAI5B,IAAK,IAHC,EAAyB,EAAO,QAAQ,GAC1C,EAAkB,IAEb,EAAI,EAAG,EAAI,EAAuB,MAAM,CAAE,IAC5C,CAAA,EAAuB,MAAM,CAAG,CAAA,EAAK,GAAM,GAAK,AAAM,IAAN,GACnD,CAAA,GAAmB,GADrB,EAIA,GAAmB,CAAsB,CAAC,EAAE,CAG9C,OAAO,CACT,EAgC6C,EAAS,MAAM,EACxD,EAAS,OAAO,CAAC,GAAG,CAAG,EAAS,GAAG,CAEnC,EAAW,MAAM,CAAC,EACpB,C,C,M,E,CATK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAWL,OAAO,CACT,EAIoC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction getSalary(employee) {\n    return parseInt(employee.dataset.salary.slice(1).replace(\",\", \"\"));\n}\nfunction seperateSalary(salary) {\n    var salaryBeforeSeparation = salary.toString();\n    var separatedSalary = \"$\";\n    for(var i = 0; i < salaryBeforeSeparation.length; i++){\n        if ((salaryBeforeSeparation.length - i) % 3 === 0 && i !== 0) separatedSalary += \",\";\n        separatedSalary += salaryBeforeSeparation[i];\n    }\n    return separatedSalary;\n}\nfunction getEmployees(list) {\n    var employees = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = list.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var employee = _step.value;\n            employees.push({\n                name: employee.textContent.trim(),\n                position: employee.dataset.position,\n                salary: getSalary(employee),\n                age: employee.dataset.age\n            });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return employees;\n}\nfunction sortList(list) {\n    var employees = getEmployees(list);\n    employees.sort(function(firstEmployee, secondEmployee) {\n        return secondEmployee.salary - firstEmployee.salary;\n    });\n    var sortedList = list.cloneNode();\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = employees[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var employee = _step.value;\n            var listItem = document.createElement(\"li\");\n            listItem.textContent = employee.name;\n            listItem.dataset.position = employee.position;\n            listItem.dataset.salary = seperateSalary(employee.salary);\n            listItem.dataset.age = employee.age;\n            sortedList.append(listItem);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return sortedList;\n}\nvar listOfEmolyees = document.querySelector(\"ul\");\nlistOfEmolyees.replaceWith(sortList(listOfEmolyees));\n\n//# sourceMappingURL=index.81c1a481.js.map\n","'use strict';\n\nfunction getSalary(employee) {\n  return parseInt(employee.dataset.salary.slice(1).replace(',', ''));\n}\n\nfunction seperateSalary(salary) {\n  const salaryBeforeSeparation = salary.toString();\n  let separatedSalary = '$';\n\n  for (let i = 0; i < salaryBeforeSeparation.length; i++) {\n    if ((salaryBeforeSeparation.length - i) % 3 === 0 && i !== 0) {\n      separatedSalary += ',';\n    }\n\n    separatedSalary += salaryBeforeSeparation[i];\n  }\n\n  return separatedSalary;\n}\n\nfunction getEmployees(list) {\n  const employees = [];\n\n  for (const employee of list.children) {\n    employees.push({\n      name: employee.textContent.trim(),\n      position: employee.dataset.position,\n      salary: getSalary(employee),\n      age: employee.dataset.age,\n    });\n  }\n\n  return employees;\n}\n\nfunction sortList(list) {\n  const employees = getEmployees(list);\n\n  employees.sort(\n    (firstEmployee, secondEmployee) =>\n      secondEmployee.salary - firstEmployee.salary,\n  );\n\n  const sortedList = list.cloneNode();\n\n  for (const employee of employees) {\n    const listItem = document.createElement('li');\n\n    listItem.textContent = employee.name;\n    listItem.dataset.position = employee.position;\n    listItem.dataset.salary = seperateSalary(employee.salary);\n    listItem.dataset.age = employee.age;\n\n    sortedList.append(listItem);\n  }\n\n  return sortedList;\n}\n\nconst listOfEmolyees = document.querySelector('ul');\n\nlistOfEmolyees.replaceWith(sortList(listOfEmolyees));\n"],"names":["listOfEmolyees","document","querySelector","replaceWith","sortList","list","employees","getEmployees","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","children","Symbol","iterator","next","done","employee","value","push","name","textContent","trim","position","dataset","salary","parseInt","slice","replace","age","err","return","sort","firstEmployee","secondEmployee","sortedList","cloneNode","listItem","createElement","seperateSalary","salaryBeforeSeparation","toString","separatedSalary","i","length","append"],"version":3,"file":"index.81c1a481.js.map"}